plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    //id "com.vanniktech.maven.publish" version "0.29.0"
    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'com.expresspay.sdkdeps'
    compileSdk 34

    defaultConfig {
        minSdk 24

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.legacy.support.v4
    implementation libs.lifecycle.extensions
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.lifecycle.livedata.ktx
    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.adapter.rxjava3
    implementation libs.glide
    //implementation libs.glide.compiler
    implementation libs.rxjava
    implementation libs.rxandroid
    implementation libs.reactivestreams
    implementation libs.okhttp3
    implementation libs.logging.interceptor
    implementation libs.okhttp.urlconnection
    implementation libs.gson
    implementation libs.commons.lang3
    implementation libs.libphonenumber
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}

// package AAR
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

//added for maven publishing
task androidJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }

    exclude '**/R.html', '**/R.*.html', '**/index.html'
    options.encoding 'utf-8'
    options {
        addStringOption 'docencoding', 'utf-8'
        addStringOption 'charset', 'utf-8'
        links 'https://docs.oracle.com/javase/7/docs/api/'
        links 'https://d.android.com/reference'
        links 'https://developer.android.com/reference/androidx/'
    }
}

task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    archiveClassifier.set('javadoc')
    from androidJavadoc.destinationDir

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                //from components.release
                groupId 'com.expresspay'
                artifactId 'sdkdeps'
                version '1.0.0'
                artifact sourceJar
                artifact("$buildDir/outputs/aar/sdkdeps-release.aar")
                pom {
                    name = artifactId
                    description = POM_DESCRIPTION
                    // If your project has a dedicated site, use its URL here
                    url = 'https://github.com/eashley-exp/epsdkdeps'
                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        connection = 'scm:git@github.com:eashley-exp/epsdkdeps.git'
                        developerConnection = 'scm:git:ssh://github.com/eashley-exp/epsdkdeps.git'
                        url = 'https://github.com/eashley-exp/epsdkdeps'
                    }
                    withXml {
                        final dependenciesNode = asNode().appendNode('dependencies')
                        ext.addDependency = { Dependency dep, String scope ->
                            if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                                return
                            final dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', scope)
                            if (!dep.transitive) {
                                final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                exclusionNode.appendNode('groupId', '*')
                                exclusionNode.appendNode('artifactId', '*')
                            } else if (!dep.properties.excludeRules.empty) {
                                final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                dep.properties.excludeRules.each { ExcludeRule rule ->
                                    exclusionNode.appendNode('groupId', rule.group ?: '*')
                                    exclusionNode.appendNode('artifactId', rule.module ?: '*')
                                }
                            }
                        }
                        configurations.implementation.getDependencies().each { dep -> addDependency(dep, "implementation") }
                        configurations.api.getDependencies().each { dep -> addDependency(dep, "implementation") }
                        configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "SonatypeSnapshot"
                url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
            maven {
                name = "sonatype"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}
signing {
    sign publishing.publications
}